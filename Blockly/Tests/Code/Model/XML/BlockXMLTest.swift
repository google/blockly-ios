/*
* Copyright 2016 Google Inc. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License")
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

@testable import Blockly
import XCTest
import AEXML

class BlockXMLTest: XCTestCase {

  // MARK: - Setup

  var factory: BlockFactory!

  override func setUp() {
    factory = try! BlockFactory(jsonPath: "xml_parsing_test",
      bundle: NSBundle(forClass: self.dynamicType))

    super.setUp()
  }

  // MARK: - XML Parsing Tests

  func testParseXML_SimpleBlocks() {
    if let rootBlock = parseBlockFromXML(BlockTestStrings.SIMPLE_BLOCK, factory)?.rootBlock {
      XCTAssertEqual(WorkspacePointMake(37, 13), rootBlock.position)
      XCTAssertEqual("3", rootBlock.uuid)
      XCTAssertEqual("simple_block",
        (rootBlock.firstFieldWithName("text_input") as? FieldInput)?.text)
    } else {
      XCTFail("Block tree was not parsed")
    }

    // All blocks need a type. Ids can be generated by the BlockFactory.
    if let rootBlock = parseBlockFromXML(BlockTestStrings.NO_BLOCK_ID, factory)?.rootBlock {
      XCTAssertEqual(WorkspacePointMake(-135, -902), rootBlock.position)
      XCTAssertEqual("no_block_id",
        (rootBlock.firstFieldWithName("text_input") as? FieldInput)?.text)
    } else {
      XCTFail("Block tree was not parsed")
    }
    XCTAssertNil(parseBlockFromXML(BlockTestStrings.NO_BLOCK_TYPE, factory))

    // Only top level blocks need a position.
    XCTAssertNotNil(parseBlockFromXML(BlockTestStrings.NO_BLOCK_POSITION, factory))
  }

  func testParseXML_BlocksWithValues() {
    // Values.
    if let blockTree =
      parseBlockFromXML(BlockTestStrings.assembleBlock(BlockTestStrings.VALUE_GOOD), factory)
    {
      XCTAssertEqual(2, blockTree.allBlocks.count)
      let block = blockTree.rootBlock.firstInputWithName("value_input")?.connectedBlock
      XCTAssertEqual("6", block?.uuid)
    } else {
      XCTFail("Block tree was not parsed")
    }
    // Value: no output connection on child
    XCTAssertNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.VALUE_NO_OUTPUT), factory))
    // value: null child block
    XCTAssertNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.VALUE_NO_CHILD), factory))
    // Value: no input with that name
    XCTAssertNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.VALUE_BAD_NAME), factory))
    // Value: multiple values for the same input
    XCTAssertNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.VALUE_REPEATED), factory))
  }

  func testParseXML_BlocksWithComments() {
    // Comment: with text
    if let blockTree =
      parseBlockFromXML(BlockTestStrings.assembleBlock(BlockTestStrings.COMMENT_GOOD), factory)
    {
      XCTAssertEqual("Calm", blockTree.rootBlock.comment)
    } else {
      XCTFail("Block tree was not parsed")
    }

    // Comment: empty string
    if let blockTree =
      parseBlockFromXML(BlockTestStrings.assembleBlock(BlockTestStrings.COMMENT_NO_TEXT), factory)
    {
      XCTAssertEqual("", blockTree.rootBlock.comment)
    } else {
      XCTFail("Block tree was not parsed")
    }
  }

  func testParseXML_BlocksWithFields() {
    // Fields
    if let blockTree = parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.FIELD_HAS_NAME), factory)
    {
      XCTAssertEqual("field_has_name",
        (blockTree.rootBlock.firstFieldWithName("text_input") as? FieldInput)?.text)
    } else {
      XCTFail("Block tree was not parsed")
    }
    // A missing or unknown field name isn't an error, it's just ignored.
    XCTAssertNotNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.FIELD_MISSING_NAME), factory))
    XCTAssertNotNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.FIELD_UNKNOWN_NAME), factory))
    XCTAssertNotNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.FIELD_MISSING_TEXT), factory))
  }

  func testParseXML_BlocksWithStatements() {
    // Statement
    if let blockTree =
      parseBlockFromXML(BlockTestStrings.assembleBlock(BlockTestStrings.STATEMENT_GOOD), factory)
    {
      XCTAssertEqual(2, blockTree.allBlocks.count)
      let block = blockTree.rootBlock.firstInputWithName("NAME")?.connectedBlock
      XCTAssertEqual("11", block?.uuid)
    } else {
      XCTFail("Block tree was not parsed")
    }

    // Statement: null child block
    XCTAssertNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.STATEMENT_NO_CHILD), factory))
    // Statement: no previous connection on child block
    XCTAssertNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.STATEMENT_BAD_CHILD), factory))
    // Statement: no input with that name
    XCTAssertNil(parseBlockFromXML(
      BlockTestStrings.assembleBlock(BlockTestStrings.STATEMENT_BAD_NAME), factory))
  }

  // MARK: - XML Serialization Tests

  func testSerializeXML_SimpleBlockWithPosition() {
    let block = try! factory.buildBlock("empty_block", uuid: "block_uuid") as Block!
    block.position = WorkspacePointMake(999, -111)

    // This is the xml we expect from `block`:
    // <block type=\"empty_block\" id=\"364\" x=\"37\" y=\"13\" />
    let xml = try! block.toXML()
    XCTAssertEqual("block", xml.name)
    XCTAssertEqual(4, xml.attributes.count)
    XCTAssertEqual("block_uuid", xml.attributes["id"])
    XCTAssertEqual("999", xml.attributes["x"])
    XCTAssertEqual("-111", xml.attributes["y"])
    XCTAssertEqual("empty_block", xml.attributes["type"])
    XCTAssertEqual(0, xml.children.count)
  }

  func testSerializeXML_SimpleBlockWithNoPosition() {
    let block = try! factory.buildBlock("empty_block", uuid: "uuid") as Block!

    // This is the xml we expect from `block`:
    // <block type=\"empty_block\" id=\"364\" x=\"0\" y=\"0\" />
    let xml = try! block.toXML()
    XCTAssertEqual("block", xml.name)
    XCTAssertEqual(4, xml.attributes.count)
    XCTAssertEqual("uuid", xml.attributes["id"])
    XCTAssertEqual("0", xml.attributes["x"])
    XCTAssertEqual("0", xml.attributes["y"])
    XCTAssertEqual("empty_block", xml.attributes["type"])
    XCTAssertEqual(0, xml.children.count)
  }

  func testSerializeXML_BlockWithInputValue() {
    let block = try! factory.buildBlock("frankenblock", uuid: "364") as Block!
    block.position = WorkspacePointMake(37, 13)
    let input = block.firstInputWithName("value_input") as Input!
    let inputBlock = try! factory.buildBlock("output_foo", uuid: "126")
    try! inputBlock?.connectToSuperiorConnection(input.connection!)

    // This is the xml we expect from `block`:
    // <block id="364" x="37" y="13" type="frankenblock">
    //   <value name="value_input">
    //     <block id="126" type="output_foo" />
    //   </value>
    //   <field name="text_input">something</field>
    //   <field name="checkbox">true</field>
    // </block>

    let xml = try! block.toXML()

    // Test: <block id="364" x="37" y="13" type="frankenblock">
    XCTAssertEqual("block", xml.name)
    XCTAssertEqual(4, xml.attributes.count)
    XCTAssertEqual("364", xml.attributes["id"])
    XCTAssertEqual("37", xml.attributes["x"])
    XCTAssertEqual("13", xml.attributes["y"])
    XCTAssertEqual("frankenblock", xml.attributes["type"])
    XCTAssertEqual(7, xml.children.count)

    // Test:
    // <value name="value_input">
    //   <block id="126" type="output_foo" />
    // </value>
    if xml.children.count >= 1 {
      let valueXML = xml.children[0]
      XCTAssertEqual("value", valueXML.name)
      XCTAssertEqual(1, valueXML.attributes.count)
      XCTAssertEqual("value_input", valueXML.attributes["name"])
      XCTAssertEqual(1, valueXML.children.count)

      if valueXML.children.count > 0 {
        let subBlock = valueXML.children[0]
        XCTAssertEqual("block", subBlock.name)
        XCTAssertEqual(2, subBlock.attributes.count)
        XCTAssertEqual("126", subBlock.attributes["id"])
        XCTAssertEqual("output_foo", subBlock.attributes["type"])
        XCTAssertEqual(0, subBlock.children.count)
      }
    }

    // Test: <field name="text_input">something</field>
    if xml.children.count >= 2 {
      let fieldXML = xml.children[1]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("text_input", fieldXML.attributes["name"])
      XCTAssertEqual("something", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }

    // Test: <field name="checkbox">true</field>
    if xml.children.count >= 3 {
      let fieldXML = xml.children[2]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("checkbox", fieldXML.attributes["name"])
      XCTAssertEqual("true", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }
  }

  func testSerializeXML_BlockWithStatementValue() {
    let block = try! factory.buildBlock("frankenblock", uuid: "1000") as Block!
    block.position = WorkspacePointMake(-350, -32)
    let input = block.firstInputWithName("NAME") as Input!
    let inputBlock = try! factory.buildBlock("statement_no_input", uuid: "2000")
    try! inputBlock?.connectToSuperiorConnection(input.connection!)

    // This is the xml we expect from `block`:
    // <block type="frankenblock" id="1000" x="0" y="0">
    //   <field name="text_input">something</field>
    //   <field name="checkbox">true</field>
    //   <statement name="NAME">
    //     <block type="statement_no_input" id="2000" />
    //   </statement>
    //   <field name="dropdown">OPTIONNAME1</field>
    //   <field name="variable">item</field>
    //   <field name="angle">90</field>
    //   <field name="colour">#ff0000</field>
    // </block>

    let xml = try! block.toXML()

    // Test: <block type="frankenblock" id="1000" x="0" y="0">
    XCTAssertEqual("block", xml.name)
    XCTAssertEqual(4, xml.attributes.count)
    XCTAssertEqual("1000", xml.attributes["id"])
    XCTAssertEqual("-350", xml.attributes["x"])
    XCTAssertEqual("-32", xml.attributes["y"])
    XCTAssertEqual("frankenblock", xml.attributes["type"])
    XCTAssertEqual(7, xml.children.count)

    // Test: <field name="text_input">something</field>
    if xml.children.count >= 1 {
      let fieldXML = xml.children[0]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("text_input", fieldXML.attributes["name"])
      XCTAssertEqual("something", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }

    // Test: <field name="checkbox">true</field>
    if xml.children.count >= 2 {
      let fieldXML = xml.children[1]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("checkbox", fieldXML.attributes["name"])
      XCTAssertEqual("true", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }

    // Test:
    // <statement name="NAME">
    //   <block type="statement_no_input" id="2000" />
    // </statement>
    if xml.children.count >= 3 {
      let statementXML = xml.children[2]
      XCTAssertEqual("statement", statementXML.name)
      XCTAssertEqual(1, statementXML.attributes.count)
      XCTAssertEqual("NAME", statementXML.attributes["name"])
      XCTAssertEqual(1, statementXML.children.count)

      if statementXML.children.count > 0 {
        let subBlock = statementXML.children[0]
        XCTAssertEqual("block", subBlock.name)
        XCTAssertEqual(2, subBlock.attributes.count)
        XCTAssertEqual("2000", subBlock.attributes["id"])
        XCTAssertEqual("statement_no_input", subBlock.attributes["type"])
        XCTAssertEqual(0, subBlock.children.count)
      }
    }

    // Test: <field name="dropdown">OPTIONNAME1</field>
    if xml.children.count >= 4 {
      let fieldXML = xml.children[3]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("dropdown", fieldXML.attributes["name"])
      XCTAssertEqual("OPTIONNAME1", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }

    // Test: <field name="variable">item</field>
    if xml.children.count >= 5 {
      let fieldXML = xml.children[4]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("variable", fieldXML.attributes["name"])
      XCTAssertEqual("item", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }

    // Test: <field name="angle">90</field>
    if xml.children.count >= 6 {
      let fieldXML = xml.children[5]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("angle", fieldXML.attributes["name"])
      XCTAssertEqual("90", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }

    // Test: <field name="colour">#ff0000</field>
    if xml.children.count >= 7 {
      let fieldXML = xml.children[6]
      XCTAssertEqual("field", fieldXML.name)
      XCTAssertEqual(1, fieldXML.attributes.count)
      XCTAssertEqual("colour", fieldXML.attributes["name"])
      XCTAssertEqual("#ff0000", fieldXML.value)
      XCTAssertEqual(0, fieldXML.children.count)
    }
  }

  // MARK: - Helper methods

  func parseBlockFromXML(xmlString: String, _ factory: BlockFactory) -> Block.BlockTree? {
    do {
      let xmlDoc = try AEXMLDocument(string: xmlString)
      return try Block.blockTreeFromXML(xmlDoc.root, factory: factory)
    } catch {
    }

    return nil
  }
}
